name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  secrets-scan:
    name: GitGuardian
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: GitGuardian
      uses: GitGuardian/ggshield/actions/secret@v1.33.0
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }} #SHA of the most recent commit on ref before the push.
        GITHUB_PUSH_BASE_SHA: ${{ github.event.head }} #SHA of the most recent commit on ref after the push.
        GITHUB_DEFAULT_BRANCH: 'main'
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      continue-on-error: true

  sast-scan:
    name: Semgrep
    runs-on: ubuntu-latest
    container:
      # Do not change this.
      image: semgrep/semgrep
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  sca-scan:
    name: Snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          COMMAND: "pip install --upgrade pip -r noteproject/requirements.txt"
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test --file=noteproject/requirements.txt --severity-threshold=medium
        continue-on-error: true

  container-scan:
    name: Docker Scout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build a Docker image
        run: docker build -f noteproject/Dockerfile -t flyin/taskflaw-test noteproject
      - name: Docker Scout Scan
        uses: docker/scout-action@v1
        with:
          dockerhub-user: ${{ vars.DOCKER_USERNAME }}
          dockerhub-password: ${{ secrets.DOCKERHUB_TOKEN }}
          command: quickview,cves,recommendations
          only-severities: critical,high,medium
          exit-code: true
        continue-on-error: true

  dast-scan:
    name: ZAP
    runs-on: ubuntu-latest
    needs: [secrets-scan, sast-scan, sca-scan, container-scan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and run Django container
        run: |
          docker build -f noteproject/Dockerfile -t django-server noteproject
          docker run -d -p 8000:8000 --name django-server django-server
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.REPO_TOKEN }}
          target: 'http://localhost:8000'
          cmd_options: '-n /zap/wrk/config/zap/noteproject-barebones.context -U admin --hook /zap/wrk/config/zap/myhook.py'
          fail_action: 'true'
        continue-on-error: true

  fuzzing:
    name: FFUF
    runs-on: ubuntu-latest
    needs: [secrets-scan, sast-scan, sca-scan, container-scan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and run Django container
        run: |
          docker build -f noteproject/Dockerfile -t django-server noteproject
          docker run -d -p 8000:8000 --name django-server django-server
      - name: Install ffuf
        run: |
          sudo apt-get update
          sudo apt-get install -y ffuf
      - name: Download raft-medium-directories.txt from SecLists
        run: |
          mkdir -p /opt/SecLists/Discovery/Web-Content
          wget -O /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt \
          https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/raft-medium-directories.txt
      - name: Run ffuf
        run: |
          ffuf -u http://localhost:8000/FUZZ \
          -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt \
          -r -c -ac \
          -o output.csv -of csv
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffuf_artifacts
          path: |
            output.csv
      - name: Check for hidden or unprotected directories
        run: |
          word_count=$(awk -F, '{print $1}' output.csv | 
                       grep -Ev -f config/ffuf/urls.txt | 
                       wc -w)
          if [ "$word_count" -gt 0 ]; then
            echo "Found hidden or unprotected directories."
            exit $word_count
          else
            echo "No hidden or unprotected directories found."
          fi
        continue-on-error: true

  release:
    name: Docker Hub
    runs-on: ubuntu-latest
    needs: [dast-scan, fuzzing]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:noteproject"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest